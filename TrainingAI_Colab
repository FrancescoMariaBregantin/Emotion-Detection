import pandas as pd

# Caricamento del dataset
df = pd.read_csv('transformed_features (3).csv')

# Visualizzare le prime righe del dataset
print(df.head())

# Interpolazione dei valori NaN
df.interpolate(method='linear', inplace=True)

# Riempimento dei rimanenti NaN con la media della colonna
df.fillna(df.mean(), inplace=True)

# Verifica che non ci siano più NaN
print(df.isna().sum())

# Visualizzare le prime righe del dataset
print(df.head())


import seaborn as sns
import matplotlib.pyplot as plt

# Conteggio delle classi
sns.countplot(x='target', data=df)
plt.title('Distribuzione delle classi')
plt.show()

# Identificazione delle colonne dei segnali
signal_columns = [col for col in df.columns if col.startswith('Segnale')]

# Plot di alcuni segnali per la visualizzazione delle serie temporali
for signal in signal_columns[:5]:  # Visualizziamo solo i primi 5 segnali per semplicità
    plt.figure(figsize=(15, 5))
    sns.lineplot(data=df, x=df.index, y=signal)
    plt.title(f'Serie temporali per {signal}')
    plt.show()

print(df.describe())

import seaborn as sns

# Calcolo della correlazione tra le feature
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Matrice di correlazione')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score

# Preprocessing
X = df.drop(columns=['target'])
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)
print("Random Forest Classifier:")
print(classification_report(y_test, y_pred_rf))
print("Accuracy:", accuracy_score(y_test, y_pred_rf))

# SVM
svm = SVC()
svm.fit(X_train, y_train)
y_pred_svm = svm.predict(X_test)
print("Support Vector Machine:")
print(classification_report(y_test, y_pred_svm))
print("Accuracy:", accuracy_score(y_test, y_pred_svm))

# Per RNN e LSTM sono necessarie librerie come Keras e TensorFlow
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, SimpleRNN
from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator

# Preprocessing per RNN e LSTM
n_input = 10  # dimensione della finestra temporale
generator = TimeseriesGenerator(X, y, length=n_input, batch_size=1)

# Modello RNN
model_rnn = Sequential()
model_rnn.add(SimpleRNN(50, activation='relu', input_shape=(n_input, X.shape[1])))
model_rnn.add(Dense(1))
model_rnn.compile(optimizer='adam', loss='mse')
model_rnn.fit(generator, epochs=50)
# Valutazione del modello RNN sarà necessaria una logica simile

# Modello LSTM
model_lstm = Sequential()
model_lstm.add(LSTM(50, activation='relu', input_shape=(n_input, X.shape[1])))
model_lstm.add(Dense(1))
model_lstm.compile(optimizer='adam', loss='mse')
model_lstm.fit(generator, epochs=50)
# Valutazione del modello LSTM sarà necessaria una logica simile

# Salvataggio del modello in formato .h5
model.save('modelR.h5')
